CLOUSURES

Permiten acceder al ambito de una funcion exterior desde un funcion interior en JS.

HAY DIFERENTEES FORMAS DE CREAR CLOUSURES
.
.
cuando creamos una funcion como:

function crearContador(){

let contador = 0;
return function incrementar(){
	contador++;
	return contador;
 };
}

const contador1 0 crearContador();






















............................................................

CLOUSURES

para entenderlo primero tenemos que tomar puntos importantes: 

............................................................
............................................................

1. AMBITO LEXICO


significa que la accesivilidad de las variabes esta determinada por la posicion de las mismas dentro de los ambitos anidados 

como podemos acceder a elementos dentro de las funciones anidadas y cuando vamos a poder tener el acceso a esta informacion




const myGlobal = 0;

function myFunction() {
  const myNumber = 1;
  console.log(myGlobal);

  function parent() { // function interna
    const inner = 2;
    console.log(myNumber, myGlobal);

    function child() {
      console.log(inner, myNumber, myGlobal);
    }

    return child();
  }

  return parent();
}

myFunction();






UNA FUNCION DENTRO DE UNA FUNCION PUEDE ACCEDER A ALGUN VALOR DE SUS PADRES



LA FUNCION DE LA FUNCION DE LA FUNCION, PUDO ACCEDER A LOS VALORES DE SUS DOS PARES QUE LO CONTIENEN E INCLUSO DEL GLOBAL.
LAS FUNCIONES ANIDADAS COMPARTEN VARIABLES


/////////
AMBITO LEXICO ES COMO VAMOS A PODER ACCEDER A ESTOS ELEMENTOS
Y CUANDO VAMOS A PODER TENER EL ACCESO A ESTA INFORMACION
					//////////////
					
					

............................................................
............................................................



LAS FUNCIONES PUEDEN RECIBIR MAS PARAMETROS DE ACUERDO A CUANTAS FUNCIONES ANIDADAS TENGAS


function func(firstPar){

return function (secondPar){
	return fistPar + secondPar
}
}


func(5)(6) //al llamar a esta funcion le estamos pasando dos argumentos a la funcion
el primero va a ser para la primera funcion
y el segundo va a ser para la funcion anidadas

RETURN : 11


............................................................
............................................................



LAS CLUSURES SON ESTAS VARIABLES QUE SE ACUERDAN EN FUNCIONES ANIDADAS




LOS CLOUSURES SON TAMBIEN ESTA CAPACIDAD QUE TIENE EL LENGUAJE DE RECORDAR DATOS.




------------------------------------------------------------
VAMOS A CREAR UNA ALCANCIA 
PARA DEMOSTRAR EL USO DE LAS CLOUSURES

------------------------------------------------------------

SIN CLOUSURES

function moneybox(coins){
    let savecoins = 0;
    savecoins += coins;
    console.log("monexbox :"+savecoins)
}

moneybox(50)
moneybox(60)

SAVECOINS == 60

		// no funciona, reescrive el valor, no suma 
		nada porque no recuerda el valor anterior
		
-------------------------------------------------------------

CON CLOUSURES

function monexbox(){
    let savecoins=0;
    function countCoins(coins){
        savecoins += coins;
        console.log(`monexbox$${savecoins}`)
    }
    return countCoins;
}

const myMoneyBox = monexbox();
myMonexbox(5)
myMonexbox(20)
myMonexbox(20)

SAVECOINS == 45

	
		//ahora si que izo la suma,
		es porque estamos accediendo a un clousure
		una funcion dentro de otra.
		y que existe un valor que es recordado
		para luego ser sumado con otra funcion.
		
------------------------------------------------------------
		




ADIOS PALABRA RESERVADA VAR

Adi√≥s al var!
.
Con esta t√©cnica de Closures ya nos podemos evitar totalmente el uso de la palabra reservada var, ya no necesitamos una variable que sea global para almacenar un valor que vamos a usar/modificar dentro de alguna funci√≥n o bloque, ahora podemos manejar y controlar una variable que solo existe dentro de la funci√≥n que la va a modificar, limitando su alcance podemos evadir errores l√≥gicos ya que si en otra funci√≥n tenemos una variable con el mismo nombre, no afectar√° nuestra l√≥gica y no nos dar√° resultados inesperados, porque literalmente ser√° otra variable, independiente de la que creamos en nuestra primera funci√≥n. üòå
.
¬øY qu√© pasa si yo creo una variable dentro de una funci√≥n y tambi√©n la quiero usar en otra funci√≥n? üò∞
Tranqui‚Ä¶ existe la palabra reservada return que nos ayudar√° a extraer el valor de nuestra variable y colocarla en otro contexto o alcance.


---------------------------------------------------------------


TRABAJO PLATZI CLOUSURES

METER MASCOTAS DENTRO DE UN ARRAY USANDO CLOUSURES


export function createPetList() {
  let petLiit = [];
  function concat(mascota) {
    petList.push(mascota)
  }
  return concat;
}

-------------------------------------------------------------










_____________________________________________________________



RETO DE LA CLASE

CREA UN CLOUSURE PARA GUARDAR LOS DATOS DE MASCOTAS



Input:

const myPetList = createPetList();

myPetList("michi");

myPetList("firulais");

myPetList();

Output:

["michi", "firulais"]






	MI CODIGO
		
export function createPetList() {
  let petList = []
  return function addPet(pet) {
    if (pet) {
      petList.push(pet)
      console.log(pet, petList)
    }
    return petList
  }
}
